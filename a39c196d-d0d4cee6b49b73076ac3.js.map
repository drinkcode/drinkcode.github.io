{"version":3,"file":"a39c196d-d0d4cee6b49b73076ac3.js","mappings":"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","sources":["webpack://blog/./src/pages/index.tsx"],"sourcesContent":["import React, { ReactElement } from \"react\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\nimport { css } from \"@emotion/react\"\nimport { GlobalStyle } from \"@/GlobalStyle\"\nimport { useState, useLayoutEffect } from \"react\"\nimport countingStar from \"@/counting_star\"\nimport mq from \"@/MediaQuery\"\ninterface AllMarkDownNode {\n  frontmatter: {\n    tags: string[]\n    title: string\n  }\n  internal: {\n    content: string\n  }\n  html: any\n}\n\ninterface AllMarkdownRemark {\n  distinct: string[]\n  nodes: AllMarkDownNode[]\n}\n\ninterface AllFileNode {\n  base: string\n  absolutePath: string\n}\ninterface AllFile {\n  nodes: AllFileNode[]\n}\n\nconst index_layout_css = css`\n  width: 100vw;\n  height: 100vh;\n  background-color: #fff;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  ${mq.iPhoneSE} {\n  }\n  ${mq.iPhoneX} {\n  }\n  ${mq.MacbookProSmall} {\n  }\n  ${mq.MacbookPro} {\n  }\n`\n\nconst title_layout_css = css`\n  position: fixed;\n  left: 250px;\n  text-align: left;\n\n  ${mq.iPhoneSE} {\n    display: none;\n  }\n  ${mq.iPhoneX} {\n    display: none;\n  }\n  ${mq.MacbookProSmall} {\n    left: 80px;\n    display: block;\n  }\n  ${mq.MacbookPro} {\n    display: block;\n  }\n`\n\nconst title_ul_css = css`\n  list-style-type: none;\n`\n\nconst title_li_css = css`\n  margin-top: 0.25rem;\n  color: rgb(52, 58, 64);\n  font-size: 0.875rem;\n  line-height: 1.5;\n  display: list-item;\n  text-align: -webkit-match-parent;\n  &:hover {\n    text-decoration: underline;\n  }\n  cursor: pointer;\n  a {\n    color: rgb(52, 58, 64);\n    text-decoration: none;\n  }\n`\n\nconst selected_tag_css = css`\n  font-weight: bold;\n  color: rgb(91, 0, 171);\n`\n\nconst markdown_content_layout_css = css`\n  display: block;\n  height: 100vh;\n  ${mq.iPhoneX} {\n    width: 100%;\n  }\n  ${mq.iPhoneX} {\n    width: 100%;\n  }\n  ${mq.MacbookProSmall} {\n    width: 62%;\n    margin-left: 80px;\n  }\n  ${mq.MacbookPro} {\n    width: 50%;\n  }\n`\n\nconst markdown_block_div_css = css`\n  max-height: 740px;\n  overflow: hidden;\n\n  ${mq.iPhoneSE} {\n    margin: 15px 0 15px 0;\n    padding: 2rem;\n  }\n  ${mq.iPhoneX} {\n    margin: 30px 0 30px 0;\n    padding: 2rem;\n  }\n  ${mq.MacbookPro} {\n    margin: 30px 0 30px 0;\n    padding: 4rem;\n  }\n`\n\nconst content_img_css = css`\n  width: 100%;\n`\n\nconst markdown_title_css = css`\n  display: block;\n  margin: 0.67em 0;\n  font-weight: 600;\n  padding-bottom: 0.3em;\n  font-size: 2em;\n  border-bottom: 1px solid hsla(210, 18%, 87%, 1);\n`\n\nconst markdown_content_div_css = css`\n  font-size: 1rem;\n  /* white-space: pre; */\n  overflow-wrap: break-word;\n  word-break: keep-all;\n  max-height: 300px;\n  /* white-space: nowrap; */\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n\n  color: rgb(73, 80, 87);\n  font-size: 16px;\n  line-height: 24px;\n  margin: 10px 0 10px 0;\n`\n\nconst markdown_content_tags_div_css = css`\n  margin: 10px 0 10px 0;\n`\n\nconst tags_of_markdown_content_a_css = css`\n  margin-bottom: 0.875rem;\n  background: rgb(241, 243, 245);\n  padding-left: 1rem;\n  padding-right: 1rem;\n  height: 2rem;\n  border-radius: 1rem;\n  display: inline-flex;\n  -webkit-box-align: center;\n  align-items: center;\n  margin-right: 0.875rem;\n  color: rgb(91, 0, 171);\n  text-decoration: none;\n  font-weight: 500;\n  font-size: 1rem;\n  cursor: pointer;\n`\n\nexport default function Home(): ReactElement {\n  const [allMarkdown, setAllMarkdown] = useState<AllMarkdownRemark>()\n  const { allMarkdownRemark }: { allMarkdownRemark: AllMarkdownRemark } =\n    useStaticQuery(tagsQuery)\n\n  const { allFile }: { allFile: AllFile } = useStaticQuery(tagsQuery)\n  console.log(allFile)\n\n  const [selectedTagIndex, setSelectedTagIndex] = useState(-1)\n\n  useLayoutEffect(() => {\n    setAllMarkdown(allMarkdownRemark)\n  }, [allMarkdownRemark])\n\n  useLayoutEffect(() => {\n    countingStar()\n  }, [])\n\n  const showAll = (dom: HTMLLIElement) => {\n    setSelectedTagIndex(-1)\n\n    setAllMarkdown(allMarkdownRemark)\n  }\n\n  const onTagClick = (dom: HTMLSpanElement, tag: string, index: number) => {\n    setSelectedTagIndex(index)\n\n    const newNodes = allMarkdownRemark.nodes.filter(\n      node => node.frontmatter.tags.indexOf(tag) !== -1\n    )\n\n    setAllMarkdown(prev => {\n      if (prev == undefined) return\n      return { distinct: prev.distinct, nodes: newNodes }\n    })\n  }\n\n  const removeTags = (str: string) => {\n    if (str === null || str === \"\") return false\n    else str = str.toString()\n\n    // Regular expression to identify HTML tags in\n    // the input string. Replacing the identified\n    // HTML tag with a null string.\n\n    return str.replace(/(<h1>.*<\\/h1>)/i, \"\").replace(/(<([^>]+)>)/gi, \"\")\n  }\n\n  const getRandomImage = () => {\n    function getRandomInt(min: number, max: number) {\n      min = Math.ceil(min)\n      max = Math.floor(max)\n      return Math.floor(Math.random() * (max - min)) + min //최댓값은 제외, 최솟값은 포함\n    }\n\n    return allFile.nodes[getRandomInt(0, allFile.nodes.length - 1)].base\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <meta\n          name=\"viewport\"\n          content=\"initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, width=device-width, user-scalable=no\"\n          data-react-helmet=\"true\"\n        />\n      </Helmet>\n      <div css={index_layout_css}>\n        <div css={title_layout_css}>\n          <ul css={title_ul_css}>\n            <li\n              css={[title_li_css, selectedTagIndex === -1 && selected_tag_css]}\n              className=\"selectedTag\"\n              onClick={e => showAll(e.currentTarget)}\n            >\n              전체보기\n            </li>\n            {allMarkdownRemark.distinct.map((tag, index) => {\n              return (\n                <li\n                  key={index}\n                  css={[\n                    title_li_css,\n                    selectedTagIndex === index && selected_tag_css,\n                  ]}\n                  onClick={e =>\n                    onTagClick(\n                      e.currentTarget,\n                      e.currentTarget.innerText,\n                      index\n                    )\n                  }\n                >\n                  {/* <Link to={`/${tag}`}>{tag}</Link> */}\n                  <span\n                  >\n                    {tag}\n                  </span>\n                  <span>\n                    (\n                    {\n                      allMarkdownRemark?.nodes.filter((node, index) =>\n                        node.frontmatter.tags.includes(tag)\n                      ).length\n                    }\n                    )\n                  </span>\n                </li>\n              )\n            })}\n          </ul>\n        </div>\n        <div css={markdown_content_layout_css}>\n          {allMarkdown &&\n            allMarkdown.nodes &&\n            allMarkdown.nodes.map((node, index) => {\n              const findImagePhrase: any =\n                node.internal.content.match(/!\\[.*\\]\\(.*\\)/i)\n              let firstImagePhrase: any = \"\"\n              if (findImagePhrase !== null)\n                firstImagePhrase = findImagePhrase[0]\n              if (firstImagePhrase.match(/\\(.*\\)/i) !== null) {\n                firstImagePhrase = firstImagePhrase.match(/\\(.*\\)/i)[0]\n                firstImagePhrase = firstImagePhrase.substring(\n                  1,\n                  firstImagePhrase.length - 1\n                )\n              }\n              // console.log(firstImagePhrase)\n\n              node.html = removeTags(node.html)\n              return (\n                <div css={markdown_block_div_css} key={index}>\n                  <Link to={`/${node.frontmatter.title}`}>\n                    <h1 css={markdown_title_css}>{node.frontmatter.title}</h1>\n                    <img\n                      css={content_img_css}\n                      src={\n                        firstImagePhrase == \"\"\n                          ? `./randomImg/${getRandomImage()}`\n                          : firstImagePhrase\n                      }\n                      alt=\"can not find image\"\n                    />\n                    <p css={markdown_content_div_css}>{node.html}</p>\n                  </Link>\n                  {/* <div css={markdown_content_tags_div_css}>\n                    {node.frontmatter.tags.map((tag, nodeIndex) => {\n                      return (\n                        <a css={tags_of_markdown_content_a_css} key={nodeIndex}>\n                          {tag}\n                        </a>\n                      )\n                    })}\n                  </div> */}\n                </div>\n              )\n            })}\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport const tagsQuery = graphql`\n  query MyQuery {\n    allMarkdownRemark(\n      sort: { fields: frontmatter___tags, order: DESC }\n      filter: { frontmatter: { tags: { nin: \"temp\" } } }\n    ) {\n      nodes {\n        frontmatter {\n          tags\n          title\n        }\n        internal {\n          content\n        }\n        html\n      }\n      distinct(field: frontmatter___tags)\n    }\n    allFile(filter: { absolutePath: { regex: \"//randomImg/\" } }) {\n      nodes {\n        base\n        absolutePath\n      }\n    }\n  }\n`\n"],"names":["index_layout_css","css","mq","title_layout_css","title_ul_css","title_li_css","selected_tag_css","markdown_content_layout_css","markdown_block_div_css","content_img_css","markdown_title_css","markdown_content_div_css","Home","useState","allMarkdown","setAllMarkdown","allMarkdownRemark","useStaticQuery","tagsQuery","allFile","console","log","selectedTagIndex","setSelectedTagIndex","useLayoutEffect","countingStar","charSet","name","content","className","onClick","e","currentTarget","distinct","map","tag","index","key","dom","newNodes","nodes","filter","node","frontmatter","tags","indexOf","prev","undefined","onTagClick","innerText","includes","length","str","min","max","findImagePhrase","internal","match","firstImagePhrase","substring","html","toString","replace","to","title","src","Math","ceil","floor","random","base","alt"],"sourceRoot":""}