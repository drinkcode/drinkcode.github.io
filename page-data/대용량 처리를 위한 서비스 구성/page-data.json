{
    "componentChunkName": "component---src-templates-markdown-template-tsx",
    "path": "/대용량 처리를 위한 서비스 구성",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"대용량 처리를 위한 서비스 구성","tags":["고성능 아키텍쳐"],"created":"2020-03-13T01:44:44.129Z","modified":"2020-03-13T01:44:49.168Z"},"html":"<h1 id=\"대용량-처리를-위한-서비스-구성\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EC%9A%A9%EB%9F%89-%EC%B2%98%EB%A6%AC%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B5%AC%EC%84%B1\" aria-label=\"대용량 처리를 위한 서비스 구성 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대용량 처리를 위한 서비스 구성</h1>\n<h1 id=\"대용량-처리를-위한-서비스-구성-1\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EC%9A%A9%EB%9F%89-%EC%B2%98%EB%A6%AC%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B5%AC%EC%84%B1-1\" aria-label=\"대용량 처리를 위한 서비스 구성 1 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대용량 처리를 위한 서비스 구성</h1>\n<p>14 Feb 2017 | <a href=\"https://jistol.github.io/blog/tags/#architecture\">architecture</a></p>\n<p><img src=\"https://jistol.github.io/assets/img/architecture/architecture-traffic-issue/1.png\" alt=\"일반적인 서비스의 기본구성\"></p>\n<p>일반적인 서비스 구성이 위와 같은 상황에서 Client가 늘어날 경우 웹 서버나 DB서버에서 병목현상이 발생할 수 있으며 병목지점별로 해결 방안이 필요합니다.</p>\n<h2 id=\"web서버-확장\" style=\"position:relative;\"><a href=\"#web%EC%84%9C%EB%B2%84-%ED%99%95%EC%9E%A5\" aria-label=\"web서버 확장 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web서버 확장</h2>\n<p>Web서버가 stateless한 구조일 경우 아래와 같이 다수의 Web서버를 두어 부하를 분산 시킬 수 있습니다.</p>\n<p><img src=\"https://jistol.github.io/assets/img/architecture/architecture-traffic-issue/2.png\" alt=\"병목현상해결을 위한 웹 서버의 확장\"></p>\n<blockquote>\n<p>stateful : 서버쪽에 client와 server의 연속된 동작 상태정보를 저장하는 형태\nstateless : 서버쪽에 client와 server의 연속된 동작 상태정보를 저장하는 않는 형태</p>\n</blockquote>\n<h2 id=\"db-확장\" style=\"position:relative;\"><a href=\"#db-%ED%99%95%EC%9E%A5\" aria-label=\"db 확장 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DB 확장</h2>\n<p><img src=\"https://jistol.github.io/assets/img/architecture/architecture-traffic-issue/3.png\" alt=\"일반적인 서비스의 DB구성\"></p>\n<p>DB구성이 위와 같을 경우 성능향상을 위해 “Scale Up”과 “Scale Out”을 고려해 볼 수 있습니다.</p>\n<blockquote>\n<p>scale up : 장비의 성능을 높여 성능향상\nscale out : 장비의 개수를 늘려 성능향상</p>\n</blockquote>\n<h2 id=\"db-readwrite-분리분산\" style=\"position:relative;\"><a href=\"#db-readwrite-%EB%B6%84%EB%A6%AC%EB%B6%84%EC%82%B0\" aria-label=\"db readwrite 분리분산 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DB Read/Write 분리,분산</h2>\n<p>대부분의 서비스는 Read가 Write보다 대략 7:3, 8:2비율로 더 많은데 이럴때 Read/Write DB를 분리하면 DB서버의 부하를 줄일 수 있습니다.</p>\n<p><img src=\"https://jistol.github.io/assets/img/architecture/architecture-traffic-issue/4.png\" alt=\"Read/Write DB 분리\"></p>\n<p>일반적으로 Master DB를 Write, Replication되는 Slave DB를 Read로 사용하는데 기본적으로 4대로 구성합니다.</p>\n<blockquote>\n<p>Master : Write\nSlave 1,2,3 : Read\n1번서버 장애시 2번서버는 서비스를 하며 3번 서버는 서비스를 중단하고 1번서버 복구를 위한 DB복사를 진행해야합니다.\n서비스중인 DB에서 복사시 부하가 가중되므로 여분의 DB가 필요합니다.</p>\n</blockquote>\n<ul>\n<li>\n<h2 id=\"eventual-consistency\" style=\"position:relative;\"><a href=\"#eventual-consistency\" aria-label=\"eventual consistency permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Eventual Consistency</h2>\n<p>Master의 내용을 Slave로 Replication하는 과정은 동기/비동기 방식이 있는데 비동기식일 경우 데이터 불일치가 발생할 수 있습니다.\n불일치하더라도 시간이 지나면 데이터가 같아지는데 이를 **“Eventual Consistency”**라고 합니다.\n데이터 일관성이 중요한 경우 Read를 분리할때 위와 같은 문제점을 인지해야합니다.</p>\n</li>\n</ul>\n<p>Read/Write DB 분기방식으로는 아래와 같은 방법이 있습니다.</p>\n<ul>\n<li>DBProxy 서버를 이용\n<ul>\n<li>프록시 서버가 쿼리를 분석하여 select시는 Read서버, 그 외엔 Master서버로 분기해줍니다.</li>\n<li>MySql Proxy, MaxScale …</li>\n</ul>\n</li>\n<li>MySql Replication Jdbc Driver 사용\n<ul>\n<li>Jdbc Driver상에서 내부적으로 readonly 옵션에 따라 Master/Slave장비를 선택해줍니다.</li>\n<li>“<a href=\"http://gywn.net/2012/07/mysql-replication-driver-error-report/#MySQL%EC%97%90%EC%84%9CReplicationDriver%EC%82%AC%EC%9A%A9%EC%8B%9C%EC%9E%A5%EC%95%A0%EC%B7%A8%EC%95%BD%EC%A0%90%EB%A6%AC%ED%8F%AC%ED%8A%B8-%EA%B8%B0%EB%8A%A5%ED%85%8C%EC%8A%A4%ED%8A%B8\">MySQL에서ReplicationDriver사용시장애취약점리포트-기능테스트</a>” 포스팅을 보시면 취약점에 대한 테스트 결과및 Oracle측의 답변이 있습니다.(2012년도 포스팅이니 현재는 해결이 됬는지 모르겠습니다.)</li>\n<li>“<a href=\"http://kwonnam.pe.kr/wiki/database/mysql/jdbc#replication_jdbc_driver\">권남 - MySQL JDBC</a>“에도 역시 여러가지 문제점들이 도출되어 있습니다.</li>\n<li>결론적으로 사용 안하는 쪽이 나을듯 합니다.</li>\n</ul>\n</li>\n<li>Spring LazyConnectionDataSourceProxy + AbstractRoutingDataSource 사용\n<ul>\n<li>Spring에서 Transaction readonly 옵션을 사용하여 분기하는 방법입니다.</li>\n<li>AbstractRoutingDataSource : 여러개의 DateSource를 하나로 묶고 자동 분기처리</li>\n<li>LazyConnectionDataSourceProxy : 트랜잭션 시작되더라도 실제 커넥션이 필요한 경우에 데이터소스에서 커넥션을 반환</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"write증가시-파티셔닝\" style=\"position:relative;\"><a href=\"#write%EC%A6%9D%EA%B0%80%EC%8B%9C-%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D\" aria-label=\"write증가시 파티셔닝 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Write증가시 파티셔닝</h2>\n<p>write가 증가하게 되면 Master로부터 Replication을 받기 위해 Slave의 write IO가 증가하게 됩니다.\n그렇게 되면 Read Slave를 아무리 늘려도 성능개선이 미미해지는데 이럴때는 Write를 줄이는 파티셔닝을 해야합니다.</p>\n<p><img src=\"https://jistol.github.io/assets/img/architecture/architecture-traffic-issue/5.png\" alt=\"Read/Write DB 분리\"></p>\n<ul>\n<li>\n<h2 id=\"파티셔닝partitioninig\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9Dpartitioninig\" aria-label=\"파티셔닝partitioninig permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파티셔닝(Partitioninig)</h2>\n<ul>\n<li>성능,가용성,정비용이성을 목적으로 논리적 데이터 요소들을 다수의 테이블로 쪼개는 행위</li>\n<li>수직분할(Vertical Partitioninig)\n<ul>\n<li>테이블의 Column 단위로 파티셔닝하는 방법</li>\n<li>스키마가 서로 달라집니다.</li>\n</ul>\n</li>\n<li>수평분할(Sharding : Horizontal Partitionning)\n<ul>\n<li>테이블의 Row 단위로 파티셔닝하는 방법</li>\n<li>스키마는 동일합니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<h2 id=\"파티션-방법\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%ED%8B%B0%EC%85%98-%EB%B0%A9%EB%B2%95\" aria-label=\"파티션 방법 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파티션 방법</h2>\n<ul>\n<li>수동 파티셔닝 : 분석된 테이블 정보를 이용하여 파티션 뷰를 직접 생성</li>\n<li>파티션 테이블 :\n<ul>\n<li>Range 파티셔닝\n<ul>\n<li>특정 기간 별로 파티션을 나눔</li>\n<li>주로 날짜조건 사용</li>\n</ul>\n</li>\n<li>Hash 파티셔닝\n<ul>\n<li>Hash함수에 적용한 결과값이 같은 레코드별로 나눔</li>\n<li>변별력 좋고 데이터분포가 고른 컬럼을 선정해야 효과적</li>\n</ul>\n</li>\n<li>List 파티셔닝\n<ul>\n<li>사용자에 의해 미리 정해진 그룹핑 기준에 따라 분할</li>\n</ul>\n</li>\n<li>결합 파티셔닝\n<ul>\n<li>위 파티션 기법을 조합하여 사용</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>자세한 설정방법은 <a href=\"http://wiki.gurubee.net/pages/viewpage.action?pageId=26742648\">구루비 DB 스터디 - 1. 테이블 파티셔닝</a>을 참조</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p><a href=\"http://www.hanbit.co.kr/store/books/look.php?p_code=E1904063627\">대용량 서버구축을 위한 Memcached와 Redis</a>\n<a href=\"http://kwon37xi.egloos.com/5364167\">Java 에서 DataBase Replication Master/Slave (write/read) 분기 처리하기</a>\n<a href=\"http://gywn.net/2012/07/mysql-replication-driver-error-report/\">MySQL에서 Replication Driver 사용 시 장애 취약점 리포트</a>\n<a href=\"http://kwonnam.pe.kr/wiki/database/mysql/jdbc\">권남 - MySQL JDBC</a>\n<a href=\"http://www.programcreek.com/java-api-examples/index.php?source_dir=replication-datasource-master/src/test/java/kr/pe/kwonnam/replicationdatasource/config/WithRoutingDataSourceConfig.java\">H2DB - LazyConnectionDataSourceProxy 예제</a>\n<a href=\"http://wiki.gurubee.net/pages/viewpage.action?pageId=26742648\">구루비 DB 스터디 - 1. 테이블 파티셔닝</a>\n<a href=\"http://bysql.net/index.php?document_srl=15154&#x26;mid=w201101B\">오라클 성능 고도화 원리와 해법 2 [11-1B]</a></p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%8C%80%EC%9A%A9%EB%9F%89-%EC%B2%98%EB%A6%AC%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B5%AC%EC%84%B1\">대용량 처리를 위한 서비스 구성</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8C%80%EC%9A%A9%EB%9F%89-%EC%B2%98%EB%A6%AC%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B5%AC%EC%84%B1-1\">대용량 처리를 위한 서비스 구성</a></p>\n<ul>\n<li><a href=\"#web%EC%84%9C%EB%B2%84-%ED%99%95%EC%9E%A5\">Web서버 확장</a></li>\n<li><a href=\"#db-%ED%99%95%EC%9E%A5\">DB 확장</a></li>\n<li><a href=\"#db-readwrite-%EB%B6%84%EB%A6%AC%EB%B6%84%EC%82%B0\">DB Read/Write 분리,분산</a></li>\n<li><a href=\"#write%EC%A6%9D%EA%B0%80%EC%8B%9C-%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D\">Write증가시 파티셔닝</a></li>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>"}}]}},"pageContext":{"title":"대용량 처리를 위한 서비스 구성"}},
    "staticQueryHashes": []}