{"version":3,"file":"component---src-pages-index-tsx-df9368d91daa3d26ec4a.js","mappings":"glNAEaA,EAAc,kBACzB,QAAC,KAAD,CACEC,OAAM,K,UCmBV,IAAMC,EAAgB,+HAShBC,EAAgB,sEAMhBC,EAAY,8CAIZC,EAAY,yPAiBZC,EAAgB,iEAKhBC,EAA2B,8DAM3BC,EAAsB,6FAOtBC,EAAe,qCAIfC,EAAkB,0JASlBC,EAAwB,uQAwCf,SAASC,IACtB,OAAsCC,EAAAA,EAAAA,YAA/BC,EAAP,KAAoBC,EAApB,KACQC,GACNC,EAAAA,EAAAA,IAAeC,GADTF,kBAGR,GAAgDH,EAAAA,EAAAA,WAAU,GAAnDM,EAAP,KAAyBC,EAAzB,MAEAC,EAAAA,EAAAA,kBAAgB,WACdN,EAAeC,KACd,CAACA,KAEJK,EAAAA,EAAAA,kBAAgB,YACdC,EAAAA,EAAAA,OACC,IAgCH,OACE,yBACE,QAACtB,EAAD,OACA,eAAKuB,IAAKrB,IACR,eAAKqB,IAAKpB,IACR,cAAIoB,IAAKnB,IACP,cACEmB,IAAG,CAAGlB,GAAoC,IAAtBc,GAA2Bb,EAA5C,OACHkB,UAAU,cACVC,QAAS,SAAAC,GAAC,OAAYA,EAAEC,cAtClCP,GAAqB,QAErBL,EAAeC,KAiCP,QAOCA,EAAkBY,SAASC,KAAI,SAACC,EAAKC,GACpC,OACE,cACEC,IAAKD,EACLR,IAAG,CACDlB,EACAc,IAAqBY,GAASzB,EAF7B,SAMH,gBACEmB,QAAS,SAAAC,GAAC,OAhDT,SAACO,EAAsBH,EAAaC,GACrDX,EAAoBW,GAEpB,IAAMG,EAAWlB,EAAkBmB,MAAMC,QACvC,SAAAC,GAAI,OAA4C,IAAxCA,EAAKC,YAAYC,KAAKC,QAAQV,MAGxCf,GAAe,SAAA0B,GACb,GAAYC,MAARD,EACJ,MAAO,CAAEb,SAAUa,EAAKb,SAAUO,MAAOD,MAwCzBS,CACEjB,EAAEC,cACFD,EAAEC,cAAciB,UAChBb,KAIHD,IAEH,wBAGId,MAAAA,OAHJ,EAGIA,EAAmBmB,MAAMC,QAAO,SAACC,EAAMN,GAAP,OAC9BM,EAAKC,YAAYC,KAAKM,SAASf,MAC/BgB,OALN,YAcV,eAAKvB,IAAKhB,GACPO,GACCA,EAAYqB,OACZrB,EAAYqB,MAAMN,KAAI,SAACQ,EAAMN,GAC3B,IA/DQgB,EA+DFC,EACJX,EAAKY,SAASC,QAAQC,MAAM,kBAC1BC,EAAwB,GAa5B,OAZwB,OAApBJ,IACFI,EAAmBJ,EAAgB,IACK,OAAtCI,EAAiBD,MAAM,aAEzBC,GADAA,EAAmBA,EAAiBD,MAAM,WAAW,IACjBE,UAClC,EACAD,EAAiBN,OAAS,IAK9BT,EAAKiB,KA5EH,QADMP,EA6EeV,EAAKiB,OA5EV,KAARP,IACfA,EAAMA,EAAIQ,YAMJC,QAAQ,kBAAmB,IAAIA,QAAQ,gBAAiB,KAuEvD,eAAKjC,IAAKf,EAAwBwB,IAAKD,IACrC,QAAC,KAAD,CAAM0B,GAAE,IAAMpB,EAAKC,YAAYoB,QAC7B,cAAInC,IAAKb,GAAqB2B,EAAKC,YAAYoB,QAC/C,eACEnC,IAAKd,EACLkD,IACsB,IAApBP,EACI,oBACAA,EAENQ,IAAI,wBAEN,aAAGrC,IAAKZ,GAA2B0B,EAAKiB,cAoBrD,IAAMpC,EAAS","sources":["webpack://blog/./src/GlobalStyle.tsx","webpack://blog/./src/pages/index.tsx"],"sourcesContent":["import { Global, css } from \"@emotion/react\"\n\nexport const GlobalStyle = () => (\n  <Global\n    styles={css`\n      /* ----------------css 초기화 ----------------- */\n      * {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n      }\n      :root {\n        --vh: 100%;\n      }\n      html {\n        height: 100vh;\n        height: -webkit-fill-available;\n        height: fill-available;\n        height: var(--vh);\n        font-size: 16px;\n      }\n      body {\n        height: 100vh;\n        height: -webkit-fill-available;\n        height: fill-available;\n        height: var(--vh);\n        font-family: \"SpoqaHanSansNeo\";\n        font-weight: normal;\n        font-size: 1rem;\n        color: #404040;\n      }\n      div,\n      span,\n      applet,\n      object,\n      iframe,\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6,\n      p,\n      blockquote,\n      pre,\n      a {\n        font-family: \"SpoqaHanSansNeo\";\n        font-weight: normal;\n        text-decoration: none;\n      }\n      a:link {\n        text-decoration: inherit;\n        color: inherit;\n      }\n\n      a:visited {\n        text-decoration: inherit;\n        color: inherit;\n      }\n      abbr,\n      acronym,\n      address,\n      big,\n      cite,\n      code,\n      del,\n      dfn,\n      em,\n      img,\n      ins,\n      kbd,\n      q,\n      s,\n      samp,\n      small,\n      strike,\n      strong,\n      sub,\n      sup,\n      tt,\n      var,\n      b,\n      u,\n      i,\n      center,\n      dl,\n      dt,\n      dd,\n      ol,\n      ul,\n      li,\n      fieldset,\n      form,\n      label,\n      legend,\n      table,\n      caption,\n      tbody,\n      tfoot,\n      thead,\n      tr,\n      th,\n      td,\n      article,\n      aside,\n      canvas,\n      details,\n      embed,\n      figure,\n      figcaption,\n      footer,\n      header,\n      hgroup,\n      menu,\n      nav,\n      output,\n      ruby,\n      section,\n      summary,\n      time,\n      mark,\n      audio,\n      input,\n      video {\n        margin: 0;\n        padding: 0;\n        border: 0;\n        font-size: 100%;\n        font: inherit;\n        vertical-align: baseline;\n        box-sizing: border-box; /* 직관적으로 padding margin사이즈 조절 ex) padding을 조절해도 width가 영향 받지 않음*/\n        -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */\n        -moz-box-sizing: border-box; /* Firefox, other Gecko */\n      }\n      article,\n      aside,\n      details,\n      figcaption,\n      figure,\n      footer,\n      header,\n      hgroup,\n      menu,\n      nav,\n      section {\n        display: block;\n      }\n      ol,\n      ul {\n        list-style: none;\n      }\n      blockquote,\n      q {\n        quotes: none;\n      }\n      blockquote:before,\n      blockquote:after,\n      q:before,\n      q:after {\n        content: \"\";\n        content: none;\n      }\n      table {\n        border-collapse: collapse;\n      }\n\n      button {\n        font-family: \"SpoqaHanSansNeo\";\n        font-weight: normal;\n\n        /* button click시 blue border을 안보여주는것 */\n        &:focus {\n          outline: 0;\n        }\n      }\n      /* \n      @font-face {\n        font-family: \"SpoqaHanSansNeo\";\n        src: local(\"SpoqaHanSansNeo-Bold\"),\n          url(\"/static/frontend/font/SpoqaHanSansNeo/SpoqaHanSansNeo-Bold.eot?#iefix\")\n            format(\"embedded-opentype\"),\n          url(\"/static/frontend/font/SpoqaHanSansNeo/SpoqaHanSansNeo-Bold.woff2\")\n            format(\"woff2\"),\n          url(\"/static/frontend/font/SpoqaHanSansNeo/SpoqaHanSansNeo-Bold.woff\")\n            format(\"woff\");\n        font-weight: bold;\n        font-style: normal;\n      }\n\n      @font-face {\n        font-family: \"SpoqaHanSansNeo\";\n        src: local(\"SpoqaHanSansNeo-Medium\"),\n          url(\"/static/frontend/font/SpoqaHanSansNeo/SpoqaHanSansNeo-Medium.eot?#iefix\")\n            format(\"embedded-opentype\"),\n          url(\"/static/frontend/font/SpoqaHanSansNeo/SpoqaHanSansNeo-Medium.woff2\")\n            format(\"woff2\"),\n          url(\"/static/frontend/font/SpoqaHanSansNeo/SpoqaHanSansNeo-Medium.woff\")\n            format(\"woff\");\n        font-weight: 500;\n        font-style: normal;\n      }\n\n      @font-face {\n        font-family: \"SpoqaHanSansNeo\";\n        src: local(\"SpoqaHanSansNeo-Regular\"),\n          url(\"/static/frontend/font/SpoqaHanSansNeo/SpoqaHanSansNeo-Regular.eot?#iefix\")\n            format(\"embedded-opentype\"),\n          url(\"/static/frontend/font/SpoqaHanSansNeo/SpoqaHanSansNeo-Regular.woff2\")\n            format(\"woff2\"),\n          url(\"/static/frontend/font/SpoqaHanSansNeo/SpoqaHanSansNeo-Regular.woff\")\n            format(\"woff\");\n        font-weight: normal;\n        font-style: normal;\n      }\n\n      @font-face {\n        font-family: \"SpoqaHanSansNeo\";\n        src: local(\"SpoqaHanSansNeo-Light\"),\n          url(\"/static/frontend/font/SpoqaHanSansNeo/SpoqaHanSansNeo-Light.eot?#iefix\")\n            format(\"embedded-opentype\"),\n          url(\"/static/frontend/font/SpoqaHanSansNeo/SpoqaHanSansNeo-Light.woff2\")\n            format(\"woff2\"),\n          url(\"/static/frontend/font/SpoqaHanSansNeo/SpoqaHanSansNeo-Light.woff\")\n            format(\"woff\");\n        font-weight: 300;\n        font-style: normal;\n      }\n\n      @font-face {\n        font-family: \"Archivo\";\n        src: url(\"/static/frontend/font/Archivo/Archivo-Black.eot\");\n        src: url(\"/static/frontend/font/Archivo/Archivo-Black.eot?#iefix\")\n            format(\"embedded-opentype\"),\n          url(\"/static/frontend/font/Archivo/Archivo-Black.woff2\")\n            format(\"woff2\"),\n          url(\"/static/frontend/font/Archivo/Archivo-Black.woff\") format(\"woff\");\n        font-weight: 900;\n        font-style: normal;\n      }\n\n      @font-face {\n        font-family: \"Archivo\";\n        src: url(\"/static/frontend/font/Archivo/Archivo-Bold.eot\");\n        src: url(\"/static/frontend/font/Archivo/Archivo-Bold.eot?#iefix\")\n            format(\"embedded-opentype\"),\n          url(\"/static/frontend/font/Archivo/Archivo-Bold.woff2\")\n            format(\"woff2\"),\n          url(\"/static/frontend/font/Archivo/Archivo-Bold.woff\") format(\"woff\");\n        font-weight: bold;\n        font-style: normal;\n      }\n\n      @font-face {\n        font-family: \"Archivo\";\n        src: url(\"/static/frontend/font/Archivo/Archivo-Medium.eot\");\n        src: url(\"/static/frontend/font/Archivo/Archivo-Medium.eot?#iefix\")\n            format(\"embedded-opentype\"),\n          url(\"/static/frontend/font/Archivo/Archivo-Medium.woff2\")\n            format(\"woff2\"),\n          url(\"/static/frontend/font/Archivo/Archivo-Medium.woff\")\n            format(\"woff\");\n        font-weight: 500;\n        font-style: normal;\n      }\n\n      @font-face {\n        font-family: \"Archivo\";\n        src: url(\"/static/frontend/font/Archivo/Archivo-Regular.eot\");\n        src: url(\"/static/frontend/font/Archivo/Archivo-Regular.eot?#iefix\")\n            format(\"embedded-opentype\"),\n          url(\"/static/frontend/font/Archivo/Archivo-Regular.woff2\")\n            format(\"woff2\"),\n          url(\"/static/frontend/font/Archivo/Archivo-Regular.woff\")\n            format(\"woff\");\n        font-weight: normal;\n        font-style: normal;\n      }\n\n      @font-face {\n        font-family: \"Archivo\";\n        src: url(\"/static/frontend/font/Archivo/Archivo-Light.eot\");\n        src: url(\"/static/frontend/font/Archivo/Archivo-Light.eot?#iefix\")\n            format(\"embedded-opentype\"),\n          url(\"/static/frontend/font/Archivo/Archivo-Light.woff2\")\n            format(\"woff2\"),\n          url(\"/static/frontend/font/Archivo/Archivo-Light.woff\") format(\"woff\");\n        font-weight: 300;\n        font-style: normal;\n      }\n\n      @font-face {\n        font-family: \"Archivo\";\n        src: url(\"/static/frontend/font/Archivo/Archivo-Thin.eot\");\n        src: url(\"/static/frontend/font/Archivo/Archivo-Thin.eot?#iefix\")\n            format(\"embedded-opentype\"),\n          url(\"/static/frontend/font/Archivo/Archivo-Thin.woff2\")\n            format(\"woff2\"),\n          url(\"/static/frontend/font/Archivo/Archivo-Thin.woff\") format(\"woff\");\n        font-weight: 100;\n        font-style: normal;\n      } */\n\n      /* ----------------css 초기화 ----------------- */\n    `}\n  />\n)\n","import React, { ReactElement } from \"react\"\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\nimport { css } from \"@emotion/react\"\nimport { GlobalStyle } from \"@/GlobalStyle\"\nimport { useState, useLayoutEffect } from \"react\"\nimport countingStar from \"@/counting_star\"\n\ninterface node {\n  frontmatter: {\n    tags: string[]\n    title: string\n  }\n  internal: {\n    content: string\n  }\n  html: any\n}\n\ninterface AllMarkdownRemark {\n  distinct: string[]\n  nodes: node[]\n}\n\nconst index_layout_css = css`\n  width: 100vw;\n  height: 100vh;\n  background-color: #fff;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nconst title_layout_css = css`\n  position: absolute;\n  left: 250px;\n  text-align: left;\n`\n\nconst title_ul_css = css`\n  list-style-type: none;\n`\n\nconst title_li_css = css`\n  margin-top: 0.25rem;\n  color: rgb(52, 58, 64);\n  font-size: 0.875rem;\n  line-height: 1.5;\n  display: list-item;\n  text-align: -webkit-match-parent;\n  &:hover {\n    text-decoration: underline;\n  }\n  cursor: pointer;\n  a {\n    color: rgb(52, 58, 64);\n    text-decoration: none;\n  }\n`\n\nconst selected_tag_css = css`\n  font-weight: bold;\n  color: rgb(91, 0, 171);\n`\n\nconst markdown_content_layout_css = css`\n  display: block;\n  width: 50%;\n  height: 100vh;\n`\n\nconst markdown_block_div_css = css`\n  margin: 30px 0 30px 0;\n  max-height: 740px;\n  padding: 4rem;\n  overflow: hidden;\n`\n\nconst content_img_css = css`\n  width: 100%;\n`\n\nconst markdown_title_css = css`\n  display: block;\n  margin: 0.67em 0;\n  font-weight: 600;\n  padding-bottom: 0.3em;\n  font-size: 2em;\n  border-bottom: 1px solid hsla(210, 18%, 87%, 1);\n`\n\nconst markdown_content_div_css = css`\n  font-size: 1rem;\n  /* white-space: pre; */\n  overflow-wrap: break-word;\n  word-break: keep-all;\n  max-height: 300px;\n  /* white-space: nowrap; */\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n\n  color: rgb(73, 80, 87);\n  font-size: 16px;\n  line-height: 24px;\n  margin: 10px 0 10px 0;\n`\n\nconst markdown_content_tags_div_css = css`\n  margin: 10px 0 10px 0;\n`\n\nconst tags_of_markdown_content_a_css = css`\n  margin-bottom: 0.875rem;\n  background: rgb(241, 243, 245);\n  padding-left: 1rem;\n  padding-right: 1rem;\n  height: 2rem;\n  border-radius: 1rem;\n  display: inline-flex;\n  -webkit-box-align: center;\n  align-items: center;\n  margin-right: 0.875rem;\n  color: rgb(91, 0, 171);\n  text-decoration: none;\n  font-weight: 500;\n  font-size: 1rem;\n  cursor: pointer;\n`\n\nexport default function Home(): ReactElement {\n  const [allMarkdown, setAllMarkdown] = useState<AllMarkdownRemark>()\n  const { allMarkdownRemark }: { allMarkdownRemark: AllMarkdownRemark } =\n    useStaticQuery(tagsQuery)\n\n  const [selectedTagIndex, setSelectedTagIndex] = useState(-1)\n\n  useLayoutEffect(() => {\n    setAllMarkdown(allMarkdownRemark)\n  }, [allMarkdownRemark])\n\n  useLayoutEffect(() => {\n    countingStar()\n  }, [])\n\n  const showAll = (dom: HTMLLIElement) => {\n    setSelectedTagIndex(-1)\n\n    setAllMarkdown(allMarkdownRemark)\n  }\n\n  const onTagClick = (dom: HTMLSpanElement, tag: string, index: number) => {\n    setSelectedTagIndex(index)\n\n    const newNodes = allMarkdownRemark.nodes.filter(\n      node => node.frontmatter.tags.indexOf(tag) !== -1\n    )\n\n    setAllMarkdown(prev => {\n      if (prev == undefined) return\n      return { distinct: prev.distinct, nodes: newNodes }\n    })\n  }\n\n  const removeTags = (str: string) => {\n    if (str === null || str === \"\") return false\n    else str = str.toString()\n\n    // Regular expression to identify HTML tags in\n    // the input string. Replacing the identified\n    // HTML tag with a null string.\n\n    return str.replace(/(<h1>.*<\\/h1>)/i, \"\").replace(/(<([^>]+)>)/gi, \"\")\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n      <div css={index_layout_css}>\n        <div css={title_layout_css}>\n          <ul css={title_ul_css}>\n            <li\n              css={[title_li_css, selectedTagIndex === -1 && selected_tag_css]}\n              className=\"selectedTag\"\n              onClick={e => showAll(e.currentTarget)}\n            >\n              전체보기\n            </li>\n            {allMarkdownRemark.distinct.map((tag, index) => {\n              return (\n                <li\n                  key={index}\n                  css={[\n                    title_li_css,\n                    selectedTagIndex === index && selected_tag_css,\n                  ]}\n                >\n                  {/* <Link to={`/${tag}`}>{tag}</Link> */}\n                  <span\n                    onClick={e =>\n                      onTagClick(\n                        e.currentTarget,\n                        e.currentTarget.innerText,\n                        index\n                      )\n                    }\n                  >\n                    {tag}\n                  </span>\n                  <span>\n                    (\n                    {\n                      allMarkdownRemark?.nodes.filter((node, index) =>\n                        node.frontmatter.tags.includes(tag)\n                      ).length\n                    }\n                    )\n                  </span>\n                </li>\n              )\n            })}\n          </ul>\n        </div>\n        <div css={markdown_content_layout_css}>\n          {allMarkdown &&\n            allMarkdown.nodes &&\n            allMarkdown.nodes.map((node, index) => {\n              const findImagePhrase: any =\n                node.internal.content.match(/!\\[.*\\]\\(.*\\)/i)\n              let firstImagePhrase: any = \"\"\n              if (findImagePhrase !== null)\n                firstImagePhrase = findImagePhrase[0]\n              if (firstImagePhrase.match(/\\(.*\\)/i) !== null) {\n                firstImagePhrase = firstImagePhrase.match(/\\(.*\\)/i)[0]\n                firstImagePhrase = firstImagePhrase.substring(\n                  1,\n                  firstImagePhrase.length - 1\n                )\n              }\n              // console.log(firstImagePhrase)\n\n              node.html = removeTags(node.html)\n              return (\n                <div css={markdown_block_div_css} key={index}>\n                  <Link to={`/${node.frontmatter.title}`}>\n                    <h1 css={markdown_title_css}>{node.frontmatter.title}</h1>\n                    <img\n                      css={content_img_css}\n                      src={\n                        firstImagePhrase == \"\"\n                          ? \"./images/test.png\"\n                          : firstImagePhrase\n                      }\n                      alt=\"can not find image\"\n                    />\n                    <p css={markdown_content_div_css}>{node.html}</p>\n                  </Link>\n                  {/* <div css={markdown_content_tags_div_css}>\n                    {node.frontmatter.tags.map((tag, nodeIndex) => {\n                      return (\n                        <a css={tags_of_markdown_content_a_css} key={nodeIndex}>\n                          {tag}\n                        </a>\n                      )\n                    })}\n                  </div> */}\n                </div>\n              )\n            })}\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport const tagsQuery = graphql`\n  query MyQuery {\n    allMarkdownRemark(\n      sort: { fields: frontmatter___tags, order: DESC }\n      filter: { frontmatter: { tags: { nin: \"temp\" } } }\n    ) {\n      nodes {\n        frontmatter {\n          tags\n          title\n        }\n        internal {\n          content\n        }\n        html\n      }\n      distinct(field: frontmatter___tags)\n    }\n  }\n`\n"],"names":["GlobalStyle","styles","index_layout_css","title_layout_css","title_ul_css","title_li_css","selected_tag_css","markdown_content_layout_css","markdown_block_div_css","content_img_css","markdown_title_css","markdown_content_div_css","Home","useState","allMarkdown","setAllMarkdown","allMarkdownRemark","useStaticQuery","tagsQuery","selectedTagIndex","setSelectedTagIndex","useLayoutEffect","countingStar","css","className","onClick","e","currentTarget","distinct","map","tag","index","key","dom","newNodes","nodes","filter","node","frontmatter","tags","indexOf","prev","undefined","onTagClick","innerText","includes","length","str","findImagePhrase","internal","content","match","firstImagePhrase","substring","html","toString","replace","to","title","src","alt"],"sourceRoot":""}